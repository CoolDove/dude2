(define-macro (-vec-mk maker vlength . body)
	`(let ((v (,maker ,vlength)))
		,(let ((idx -1))
			(cons 'begin (map (lambda (a) (begin (set! idx (+ idx 1)) `(vector-set! v ,idx ,a))) body))
		)
		v
	)
)

(define-macro (vec-mk . body)
	`(-vec-mk make-vector ,(length body) ,@body)
)

(define-macro (bvec-mk vlength . body)
	`(-vec-mk make-byte-vector ,vlength ,@body)
)
(define-macro (fvec-mk vlength . body)
	`(-vec-mk make-float-vector ,vlength ,@body)
)
(define-macro (fvec4-mk . body)
	`(-vec-mk make-float-vector 4 ,@body)
)
(define-macro (fvec3-mk . body)
	`(-vec-mk make-float-vector 3 ,@body)
)
(define-macro (fvec2-mk . body)
	`(-vec-mk make-float-vector 2 ,@body)
)

(define (vec4.x vec) (vector-ref vec 0))
(define (vec4.y vec) (vector-ref vec 1))
(define (vec4.z vec) (vector-ref vec 2))
(define (vec4.w vec) (vector-ref vec 3))
(define vec3.x vec4.x)
(define vec3.y vec4.y)
(define vec3.z vec4.z)

(define vec2.x vec4.x)
(define vec2.y vec4.y)


(define* (linalg/is-in-rectangle rect point)
	(let
		(
			(px (fvec2.x point)) (py (fvec2.y point))
			(rxmin (fvec4.x rect)) (rymin (fvec4.y rect))
			(rxmax (+ (fvec4.x rect) (fvec4.z rect))) (rymax (+ (fvec4.y rect) (fvec4.w rect)))
		)
		(not(or (< px rxmin) (> px rxmax) (< py rymin) (> py rymax) ))
	)
)

(define* (colr-mk r g b (a 255))
	(let ((col (make-byte-vector 4 0)))
		(vector-set! col 0 r)
		(vector-set! col 1 g)
		(vector-set! col 2 b)
		(vector-set! col 3 a)
		col
	)
)
