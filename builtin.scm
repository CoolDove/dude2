(define-macro (vec-mk maker dimen . body)
		`(let ((v (,maker ,dimen)))
			,(let ((idx -1))
				(cons 'begin (map (lambda (a) (begin (set! idx (+ idx 1)) `(vector-set! v ,idx ,a))) body))
			)
			v
		)
)
(define-macro (bvec-mk dimen . body)
	`(vec-mk make-byte-vector ,dimen ,@body)
)
(define-macro (fvec-mk dimen . body)
	`(vec-mk make-float-vector ,dimen ,@body)
)
(define-macro (fvec4-mk . body)
	`(vec-mk make-float-vector 4 ,@body)
)
(define-macro (fvec3-mk . body)
	`(vec-mk make-float-vector 3 ,@body)
)
(define-macro (fvec2-mk . body)
	`(vec-mk make-float-vector 2 ,@body)
)

(define* (colr-mk r g b (a 255))
	(let ((col (make-byte-vector 4 0)))
		(vector-set! col 0 r)
		(vector-set! col 1 g)
		(vector-set! col 2 b)
		(vector-set! col 3 a)
		col
	)
)

(define* (fvec2-add a b)
	(if (and (float-vector? a) (float-vector? b))
		(fvec2-mk
			(+ (vector-ref a 0) (vector-ref b 0))
			(+ (vector-ref a 1) (vector-ref b 1))
		)
		#f
	)
)
(define* (fvec2-minus a b)
	(if (and (float-vector? a) (float-vector? b))
		(fvec2-mk
			(- (vector-ref a 0) (vector-ref b 0))
			(- (vector-ref a 1) (vector-ref b 1))
		)
		#f
	)
)
(define* (fvec2-*-scalar v s)
	(if (and (float-vector? a) (number? b))
		(fvec2-mk
			(- (vector-ref a 0) (vector-ref b 0))
			(- (vector-ref a 1) (vector-ref b 1))
		)
		#f
	)
)
